[gd_scene load_steps=13 format=2]

[ext_resource path="res://Game/Blocks/FakeWallField/FakeWallField.gd" type="Script" id=1]
[ext_resource path="res://Game/Assets/Images/Environment/tilesmap.png" type="Texture" id=2]
[ext_resource path="res://Game/Assets/Audio/ogg/effects/distorsion.ogg" type="AudioStream" id=3]
[ext_resource path="res://Game/Assets/Images/Explosion.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode blend_mix;


//uniform vec2 SCALEV = vec2(1.0);
uniform float SCALEI = 1.0;
uniform vec2 DECAL = vec2(2.0);
uniform float OFFSET = 0.0;
uniform float blur_radius = 3.0;
uniform bool sided=false;
uniform bool horizontal=false;
uniform bool add_distord_color=true;
uniform float min_alpha=0.0;
uniform float max_alpha=1.0;
uniform float FLASH_SCALE=1.0;
uniform float min_color_dist=0.0;
uniform float max_color_dist=1.0;
uniform float FLASH_OFFSET=0;


float rand(vec2 coords){
	return fract(sin(dot(coords, vec2(12.9898,78.233)))*43758.5453123);
}


float noise(vec2 coords){
	vec2 i = floor(coords);
	vec2 f = fract(coords);
	
	float a = rand(i);
	float b = rand(i+vec2(1.0,0.0));
	float c = rand(i+vec2(0.0,1.0));
	float d = rand(i+vec2(1.0,1.0));
	
	vec2 cubic = f * f * (3.0-2.0*f);
	
	return mix(a,b, cubic.x) + (c-a) * cubic.y * (1.0 - cubic.x) + (d-b) * cubic.x * cubic.y;
}

vec4 pixel(vec4 orig){
	vec4 pixel=orig;
	if(pixel.rgb==vec3(1.0)){
		pixel=vec4(0.3,0.3,0.2,0.8);
//		pixel=vec4(1,0,0,1);
	}
	return pixel;
}

vec2 blur_coords(vec2 uv,vec2 distord, vec2 offset){
//	return uv+offset;
//	return clamp( (uv+vec2(0.003))/1.06 +distord+ offset,vec2(0,0),vec2(0.1,0.1));
	return clamp( ((uv+vec2(0.003))/1.006)+distord+ offset,vec2(0,0),vec2(0.1,0.1));
}

void fragment() {
	vec2 ps = TEXTURE_PIXEL_SIZE;
	
	vec2 noisecoord1 = UV *  SCALEI;
	vec2 noisecoord2 = UV *  SCALEI + OFFSET;
	
	vec2 motion1 = vec2(TIME * 0.2, TIME * -0.2);
	vec2 motion2 = vec2(TIME * 0.2, TIME * 0.2);
	
	vec2 distord1 = vec2(noise(noisecoord1+motion1),noise(noisecoord2+motion1))-DECAL;
	vec2 distord2 = vec2(noise(noisecoord1+motion2),noise(noisecoord2+motion2))-DECAL;
	
	vec2 distord_sum = (distord1+distord2)/60.0;
	
	vec4 colorig = pixel(texture(TEXTURE, (UV+vec2(0.003))/1.006))*2.0;

	vec4 blur=colorig;
	blur += pixel(texture(TEXTURE, blur_coords(UV,distord_sum, vec2(0.0, -blur_radius) * ps)));
	blur += pixel(texture(TEXTURE, blur_coords(UV,distord_sum, vec2(0.0, blur_radius) * ps)));
	blur += pixel(texture(TEXTURE, blur_coords(UV,distord_sum, vec2(-blur_radius, 0.0) * ps)));
	blur += pixel(texture(TEXTURE, blur_coords(UV,distord_sum, vec2(blur_radius, 0.0) * ps)));
	blur /= 5.0;
	
	vec4 col=blur;
	blur.a=1.0;
	
	if(col.rgb==vec3(1.0)){
		col.a=max_alpha;	
	}else{
		if(add_distord_color){
			float distl=clamp(length(distord_sum)*60.0,0.0,1.0);
			col.rgb=mix(vec3(clamp(0.5-distl,min_color_dist,max_color_dist)),col.rgb,1.7);
			col.a=clamp(distl*(1.0+sin(TIME+FLASH_OFFSET)*FLASH_SCALE),min_alpha,max_alpha);
		}
	}
	
	if(sided){
		if(horizontal){
			if(UV.y<0.01){
				col.a=clamp(UV.y*50.0,0.0,col.a);
			}
			if(UV.y>0.09){
				col.a=clamp((0.1-UV.y)*50.0,0.0,col.a);
			}
		}else{
			if(UV.x<0.01){
				col.a=clamp(UV.x*50.0,0.0,col.a);
			}
			if(UV.x>0.09){
				col.a=clamp((0.1-UV.x)*50.0,0.0,col.a);
			}
		}
	}
	
	COLOR = col;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/SCALEI = 31.0
shader_param/DECAL = Vector2( 0.5, 0.7 )
shader_param/OFFSET = 10.0
shader_param/blur_radius = 1.0
shader_param/sided = false
shader_param/horizontal = true
shader_param/add_distord_color = true
shader_param/min_alpha = 0.3
shader_param/max_alpha = 0.8
shader_param/FLASH_SCALE = 1.0
shader_param/min_color_dist = 0.6
shader_param/max_color_dist = 1.0
shader_param/FLASH_OFFSET = 0.0

[sub_resource type="CircleShape2D" id=3]
radius = 13.4511

[sub_resource type="Gradient" id=4]
offsets = PoolRealArray( 0, 0.191943, 0.43128, 1 )
colors = PoolColorArray( 0, 0, 0, 0, 0, 0, 0, 0.0352941, 0.27, 0.2025, 0, 0.0745098, 0, 0, 0, 0 )

[sub_resource type="GradientTexture" id=5]
gradient = SubResource( 4 )

[sub_resource type="Curve" id=6]
_data = [ Vector2( 0, 0.0090909 ), 0.0, 8.74532, 0, 0, Vector2( 1, 0 ), 0.0190823, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=7]
curve = SubResource( 6 )

[sub_resource type="ParticlesMaterial" id=8]
lifetime_randomness = 0.31
trail_divisor = 3
emission_shape = 2
emission_box_extents = Vector3( 4, 4, 1 )
flag_disable_z = true
direction = Vector3( 0, 1, 0 )
spread = 180.0
gravity = Vector3( 0, 0, 0 )
initial_velocity = 6.0
initial_velocity_random = 0.6
orbit_velocity = 0.0
orbit_velocity_random = 0.0
angle = 18.0
angle_random = 1.0
scale = 3.0
scale_curve = SubResource( 7 )
color_ramp = SubResource( 5 )

[node name="FakeWallField" type="Node2D"]
script = ExtResource( 1 )

[node name="Wall" type="Sprite" parent="."]
material = SubResource( 2 )
z_index = 100
z_as_relative = false
texture = ExtResource( 2 )
vframes = 10
hframes = 10
frame = 6

[node name="Area2D" type="Area2D" parent="."]
gravity_vec = Vector2( 0, 0 )
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 3 )

[node name="SoundWhenPlayerInto" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 3 )
mix_target = 1

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 27
follow_viewport_enable = true

[node name="DarknessSmokingFog" type="Particles2D" parent="CanvasLayer"]
amount = 50
lifetime = 10.0
randomness = 0.5
process_material = SubResource( 8 )
texture = ExtResource( 4 )
[connection signal="body_entered" from="Area2D" to="." method="_on_Area2D_body_entered"]
[connection signal="body_exited" from="Area2D" to="." method="_on_Area2D_body_exited"]
